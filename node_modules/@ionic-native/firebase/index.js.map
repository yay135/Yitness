{"version":3,"sources":["../../../src/@ionic-native/plugins/firebase/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @beta\n * @name Firebase\n * @description\n * This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).\n *\n * @usage\n * ```typescript\n * import { Firebase } from '@ionic-native/firebase';\n *\n * constructor(private firebase: Firebase) { }\n *\n * ...\n *\n * this.firebase.getToken()\n *   .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\n *   .catch(error => console.error('Error getting token', error));\n *\n * this.firebase.onTokenRefresh()\n *   .subscribe((token: string) => console.log(`Got a new token ${token}`));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Firebase',\n  plugin: 'cordova-plugin-firebase',\n  pluginRef: 'FirebasePlugin',\n  repo: 'https://github.com/arnesson/cordova-plugin-firebase',\n  platforms: ['Android', 'iOS'],\n})\n\nexport class Firebase extends IonicNativePlugin {\n  /**\n   * Get the device token\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getToken(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get notified when a token is refreshed\n   * @return {Observable<any>}\n   */\n  @Cordova({\n    observable: true\n  })\n  onTokenRefresh(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Get notified when the user opens a notification\n   * @return {Observable<any>}\n   */\n  @Cordova({\n    observable: true\n  })\n  onNotificationOpen(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Grant permission to receive push notifications\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  grantPermission(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Check permission to receive push notifications\n   * @return {Promise<{isEnabled: boolean}>}\n   */\n  @Cordova()\n  hasPermission(): Promise<{ isEnabled: boolean }> {\n    return;\n  }\n\n  /**\n   * Set icon badge number. Set to 0 to clear the badge.\n   * @param badgeNumber {number}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setBadgeNumber(badgeNumber: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get icon badge number\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getBadgeNumber(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Subscribe to a topic\n   * @param topic {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  subscribe(topic: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Unsubscribe from a topic\n   * @param topic {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  unsubscribe(topic: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Unregister from firebase, used to stop receiving push notifications.\n   * Call this when you logout user from your app.\n   */\n  @Cordova()\n  unregister(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Log an event using Analytics\n   * @param type {string}\n   * @param data {Object}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  logEvent(type: string, data: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Log an Error using FirebaseCrash\n   * @param message {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  logError(message: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set the name of the current screen in Analytics\n   * @param name {string} Screen name\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setScreenName(name: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set a user id for use in Analytics\n   * @param userId {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setUserId(userId: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set a user property for use in Analytics\n   * @param name {string}\n   * @param value {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setUserProperty(name: string, value: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Fetch Remote Config parameter values for your app\n   * @param cacheExpirationSeconds\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  fetch(cacheExpirationSeconds?: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Activate the Remote Config fetched config\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  activateFetched(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Retrieve a Remote Config value\n   * @param key {string}\n   * @param namespace {string}\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  getValue(key: string, namespace?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Retrieve a Remote Config byte array\n   * @param key {string}\n   * @param namespace {string}\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n    successIndex: 2,\n    errorIndex: 3\n  })\n  getByteArray(key: string, namespace?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get the current state of the FirebaseRemoteConfig singleton object\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  getInfo(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Change the settings for the FirebaseRemoteConfig object's operations\n   * @param settings {Object}\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  setConfigSettings(settings: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set defaults in the Remote Config\n   * @param defaults {Object}\n   * @param namespace {string}\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n    successIndex: 2,\n    errorIndex: 3\n  })\n  setDefaults(defaults: any, namespace: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sends an SMS to the user with the SMS verification code and returns the Verification ID required to sign in using phone authentication\n   * @param phoneNumber {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  getVerificationID(phoneNumber: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sends an SMS to the user with the SMS verification code and returns the Verification ID required to sign in using phone authentication\n   * @param phoneNumber {string} the phone number, including '+' and country code\n   * @param timeoutDuration {number} the timeout in sec - no more SMS will be sent to this number until this timeout expires\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n    successIndex: 2,\n    errorIndex: 3\n  })\n  verifyPhoneNumber(phoneNumber: string, timeoutDuration: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Allows the user to enable/disable analytics collection\n   * @param enabled {booleab} value to set collection\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  setAnalyticsCollectionEnabled(enabled: boolean): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}